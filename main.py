import telebot
from flask import Flask, request
import openai
import os

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = os.getenv("BOT_TOKEN")
openai.api_key = os.getenv("OPENAI_API_KEY")

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# === –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ===
@app.route('/')
def index():
    return '‚úÖ JobcenterGPT —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π!'

# === –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–∏—ë–º–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram ===
@app.route(f'/{TOKEN}', methods=['POST'])
def receive_update():
    json_str = request.get_data(as_text=True)
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return '', 200

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@bot.message_handler(commands=['start'])
def start_message(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /translate <—Ç–µ–∫—Å—Ç>, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ –Ω–µ–º–µ—Ü–∫–∏–π üá©üá™")

# === –ö–æ–º–∞–Ω–¥–∞ /translate ===
@bot.message_handler(commands=['translate'])
def translate_message(message):
    try:
        text = message.text.replace('/translate', '').strip()
        print("Received:", text)

        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫. –ü–µ—Ä–µ–≤–æ–¥–∏ —Ç–µ–∫—Å—Ç —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ –Ω–µ–º–µ—Ü–∫–∏–π."},
                {"role": "user", "content": text}
            ]
        )

        translated = response.choices[0].message.content.strip()
        bot.reply_to(message, translated)
        print("Translated:", translated)

    except Exception as e:
        print("–û—à–∏–±–∫–∞:", e)
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    try:
        text = message.text
        print("Received:", text)

        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫. –ü–µ—Ä–µ–≤–æ–¥–∏ —Ç–µ–∫—Å—Ç —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ –Ω–µ–º–µ—Ü–∫–∏–π."},
                {"role": "user", "content": text}
            ]
        )

        translated = response.choices[0].message.content.strip()
        bot.reply_to(message, translated)
        print("Translated:", translated)

    except Exception as e:
        print("–û—à–∏–±–∫–∞:", e)
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == '__main__':
    bot.remove_webhook()
    bot.set_webhook(url=f'https://jobcentergpt.onrender.com/{TOKEN}')
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
